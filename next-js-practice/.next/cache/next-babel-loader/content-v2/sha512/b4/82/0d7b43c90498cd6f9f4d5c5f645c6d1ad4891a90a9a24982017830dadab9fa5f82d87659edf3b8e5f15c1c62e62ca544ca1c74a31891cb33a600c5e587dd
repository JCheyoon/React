{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Cheyoon\\\\code\\\\study\\\\react\\\\next-js-practice\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst MeetUpDetails = ({\n  meetupData\n}) => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    title: meetupData.title,\n    image: meetupData.image,\n    address: meetupData.address,\n    description: meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}; //getStaticPath=> [meetUpID] Url 를 generated\n\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(process.env.MONGODB_CLUSTER);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetup\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //find document object but only in _id fields\n\n  client.close().then();\n  return {\n    fallback: false,\n    //false로 두면 m3같은 다른 path로 들어오게되면 404에러\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}; //staticProps -> pre-generated during build process\n\nexport const getStaticProps = async context => {\n  //get id from [meetupId] Url\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(process.env.MONGODB_CLUSTER);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetup\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close().then(); //fetch Data for single meetup\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n};\nexport default MeetUpDetails;","map":{"version":3,"sources":["C:/Users/Cheyoon/code/study/react/next-js-practice/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","MeetUpDetails","meetupData","title","image","address","description","getStaticPaths","client","connect","process","env","MONGODB_CLUSTER","db","meetupsCollection","collection","meetups","find","_id","toArray","close","then","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","props","id"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AACxC,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,UAAU,CAACC,KADpB;AAEE,IAAA,KAAK,EAAED,UAAU,CAACE,KAFpB;AAGE,IAAA,OAAO,EAAEF,UAAU,CAACG,OAHtB;AAIE,IAAA,WAAW,EAAEH,UAAU,CAACI;AAJ1B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD,C,CAWA;;;AACA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoBC,OAAO,CAACC,GAAR,CAAYC,eAAhC,CAArB;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB,CALwC,CAKgC;;AAExEX,EAAAA,MAAM,CAACY,KAAP,GAAeC,IAAf;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AACY;AACjBC,IAAAA,KAAK,EAAEP,OAAO,CAACQ,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACP,GAAP,CAAWU,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD,CAfM,C,CAiBP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMnB,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoBC,OAAO,CAACC,GAAR,CAAYC,eAAhC,CAArB;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAA1B;AAEA,QAAMgB,cAAc,GAAG,MAAMjB,iBAAiB,CAACkB,OAAlB,CAA0B;AACrDd,IAAAA,GAAG,EAAElB,QAAQ,CAAC2B,QAAD;AADwC,GAA1B,CAA7B;AAIAnB,EAAAA,MAAM,CAACY,KAAP,GAAeC,IAAf,GAZ+C,CAc/C;;AACA,SAAO;AACLY,IAAAA,KAAK,EAAE;AACL/B,MAAAA,UAAU,EAAE;AACVgC,QAAAA,EAAE,EAAEH,cAAc,CAACb,GAAf,CAAmBU,QAAnB,EADM;AAEVzB,QAAAA,KAAK,EAAE4B,cAAc,CAAC5B,KAFZ;AAGVE,QAAAA,OAAO,EAAE0B,cAAc,CAAC1B,OAHd;AAIVC,QAAAA,WAAW,EAAEyB,cAAc,CAACzB;AAJlB;AADP;AADF,GAAP;AAUD,CAzBM;AA2BP,eAAeL,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst MeetUpDetails = ({ meetupData }) => {\n  return (\n    <MeetupDetail\n      title={meetupData.title}\n      image={meetupData.image}\n      address={meetupData.address}\n      description={meetupData.description}\n    />\n  );\n};\n\n//getStaticPath=> [meetUpID] Url 를 generated\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(process.env.MONGODB_CLUSTER);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetup\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); //find document object but only in _id fields\n\n  client.close().then();\n\n  return {\n    fallback: false, //false로 두면 m3같은 다른 path로 들어오게되면 404에러\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n};\n\n//staticProps -> pre-generated during build process\nexport const getStaticProps = async (context) => {\n  //get id from [meetupId] Url\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(process.env.MONGODB_CLUSTER);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetup\");\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close().then();\n\n  //fetch Data for single meetup\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description,\n      },\n    },\n  };\n};\n\nexport default MeetUpDetails;\n"]},"metadata":{},"sourceType":"module"}