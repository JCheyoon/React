{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Cheyoon\\\\code\\\\study\\\\react\\\\next-js-practice\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nconst MeetUpDetails = () => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    title: \"A first meetup\",\n    image: \"https://www.rd.com/wp-content/uploads/2021/01/GettyImages-1175550351.jpg\",\n    address: \"hungary df\",\n    description: \"description\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}; //getStaticPath=> [meetUpID] Url 를 generated\n\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(process.env.MONGODB_CLUSTER);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetup\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //find document object but only in _id fields\n\n  return {\n    fallback: false,\n    //false로 두면 m3같은 다른 path로 들어오게되면 404에러\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}; //staticProps -> pre-generated during build process\n\nexport const getStaticProps = async context => {\n  //get id from [meetupId] Url\n  const meetupId = context.params.meetupId;\n  console.log(meetupId); //fetch Data for single meetup\n\n  return {\n    props: {\n      meetupData: {\n        image: \"https://www.rd.com/wp-content/uploads/2021/01/GettyImages-1175550351.jpg\",\n        id: meetupId,\n        title: \"A first meetup\",\n        address: \"hungary df\",\n        description: \"description\"\n      }\n    }\n  };\n};\nexport default MeetUpDetails;","map":{"version":3,"sources":["C:/Users/Cheyoon/code/study/react/next-js-practice/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","MeetUpDetails","getStaticPaths","client","connect","process","env","MONGODB_CLUSTER","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","props","meetupData","image","id","title","address","description"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,gBADR;AAEE,IAAA,KAAK,EAAC,0EAFR;AAGE,IAAA,OAAO,EAAC,YAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD,C,CAWA;;;AACA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAMH,WAAW,CAACI,OAAZ,CAAoBC,OAAO,CAACC,GAAR,CAAYC,eAAhC,CAArB;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB,CALwC,CAKgC;;AAExE,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AACY;AACjBC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD,CAbM,C,CAeP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAJ+C,CAM/C;;AACA,SAAO;AACLM,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EACH,0EAFQ;AAGVC,QAAAA,EAAE,EAAET,QAHM;AAIVU,QAAAA,KAAK,EAAE,gBAJG;AAKVC,QAAAA,OAAO,EAAE,YALC;AAMVC,QAAAA,WAAW,EAAE;AANH;AADP;AADF,GAAP;AAYD,CAnBM;AAqBP,eAAe/B,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nconst MeetUpDetails = () => {\n  return (\n    <MeetupDetail\n      title=\"A first meetup\"\n      image=\"https://www.rd.com/wp-content/uploads/2021/01/GettyImages-1175550351.jpg\"\n      address=\"hungary df\"\n      description=\"description\"\n    />\n  );\n};\n\n//getStaticPath=> [meetUpID] Url 를 generated\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(process.env.MONGODB_CLUSTER);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetup\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); //find document object but only in _id fields\n\n  return {\n    fallback: false, //false로 두면 m3같은 다른 path로 들어오게되면 404에러\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n};\n\n//staticProps -> pre-generated during build process\nexport const getStaticProps = async (context) => {\n  //get id from [meetupId] Url\n  const meetupId = context.params.meetupId;\n\n  console.log(meetupId);\n\n  //fetch Data for single meetup\n  return {\n    props: {\n      meetupData: {\n        image:\n          \"https://www.rd.com/wp-content/uploads/2021/01/GettyImages-1175550351.jpg\",\n        id: meetupId,\n        title: \"A first meetup\",\n        address: \"hungary df\",\n        description: \"description\",\n      },\n    },\n  };\n};\n\nexport default MeetUpDetails;\n"]},"metadata":{},"sourceType":"module"}