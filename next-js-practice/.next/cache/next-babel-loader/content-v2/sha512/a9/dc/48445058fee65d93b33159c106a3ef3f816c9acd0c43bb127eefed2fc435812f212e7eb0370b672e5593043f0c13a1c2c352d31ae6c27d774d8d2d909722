{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Cheyoon\\\\code\\\\study\\\\react\\\\next-js-practice\\\\pages\\\\index.js\",\n    _this = this;\n\nimport Head from \"next/head\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nvar Homepage = function Homepage(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React meetup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_c = Homepage;\nexport var __N_SSG = true;\nexport default Homepage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Homepage\");","map":{"version":3,"sources":["C:/Users/Cheyoon/code/study/react/next-js-practice/pages/index.js"],"names":["Head","MeetupList","Homepage","props","meetups"],"mappings":";;;;;;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF,eAIE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,aAJF;AAAA,kBADF;AAQD,CATD;;KAAMF,Q;;AAkCN,eAAeA,QAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\nimport Head from \"next/head\";\nimport MeetupList from \"../components/meetups/MeetupList\";\n\nconst Homepage = (props) => {\n  return (\n    <>\n      <Head>\n        <title>React meetup</title>\n      </Head>\n      <MeetupList meetups={props.meetups} />\n    </>\n  );\n};\n\nexport const getStaticProps = async () => {\n  //fetch Data from API\n  const client = await MongoClient.connect(process.env.MONGODB_CLUSTER);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetup\");\n\n  const meetups = await meetupsCollection.find().toArray();\n\n  client.close().then(); //close server before return\n\n  return {\n    props: {\n      meetups: meetups.map((meetup) => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString(),\n      })),\n    },\n    revalidate: 1,\n  };\n};\n\nexport default Homepage;\n"]},"metadata":{},"sourceType":"module"}