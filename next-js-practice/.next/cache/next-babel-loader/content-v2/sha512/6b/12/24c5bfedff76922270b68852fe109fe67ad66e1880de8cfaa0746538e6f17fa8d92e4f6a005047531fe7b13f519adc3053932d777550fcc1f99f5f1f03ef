{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Cheyoon\\\\code\\\\study\\\\react\\\\next-js-practice\\\\pages\\\\[meetupId]\\\\index.js\",\n    _this = this;\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nvar MeetUpDetails = function MeetUpDetails(_ref) {\n  var meetupData = _ref.meetupData;\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    title: meetupData.title,\n    image: meetupData.image,\n    address: meetupData.address,\n    description: meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, _this);\n}; //getStaticPath=> [meetUpID] Url 를 generated\n\n\n_c = MeetUpDetails;\nexport var __N_SSG = true;\nexport default MeetUpDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetUpDetails\");","map":{"version":3,"sources":["C:/Users/Cheyoon/code/study/react/next-js-practice/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetUpDetails","meetupData","title","image","address","description"],"mappings":";;;;;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AACxC,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,UAAU,CAACC,KADpB;AAEE,IAAA,KAAK,EAAED,UAAU,CAACE,KAFpB;AAGE,IAAA,OAAO,EAAEF,UAAU,CAACG,OAHtB;AAIE,IAAA,WAAW,EAAEH,UAAU,CAACI;AAJ1B;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CATD,C,CAWA;;;KAXML,a;;AAoDN,eAAeA,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst MeetUpDetails = ({ meetupData }) => {\n  return (\n    <MeetupDetail\n      title={meetupData.title}\n      image={meetupData.image}\n      address={meetupData.address}\n      description={meetupData.description}\n    />\n  );\n};\n\n//getStaticPath=> [meetUpID] Url 를 generated\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(process.env.MONGODB_CLUSTER);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetup\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); //find document object but only in _id fields\n\n  client.close().then();\n\n  return {\n    fallback: false, //false로 두면 m3같은 다른 path로 들어오게되면 404에러\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n};\n\n//staticProps -> pre-generated during build process\nexport const getStaticProps = async (context) => {\n  //get id from [meetupId] Url\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(process.env.MONGODB_CLUSTER);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetup\");\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close().then();\n\n  //fetch Data for single meetup\n  return {\n    props: {\n      meetupData: selectedMeetup,\n    },\n  };\n};\n\nexport default MeetUpDetails;\n"]},"metadata":{},"sourceType":"module"}